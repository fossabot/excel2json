{"version":3,"sources":["App.js","registerServiceWorker.js","index.js"],"names":["defaultFunction","src_App_0","App","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","changeState","e","key","preventDefault","setState","_defineProperty","target","files","value","transfer","state","file","alert","reader","FileReader","onload","workbook","xlsx_full_min_default","a","read","result","type","data","utils","sheet_to_json","Sheets","SheetNames","sheet","window","eval","function","fn","line","length","json","stringify_object_default","indent","singleQuotes","readAsBinaryString","clipboard","clipboard_default","on","clearSelection","destroy","_this2","react_default","createElement","className","name","accept","onChange","min","rows","cols","placeholder","onClick","data-clipboard-target","id","react","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","react_dom_default","render","document","getElementById","URL","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.bb2c5001.chunk.js","sourcesContent":["/*eslint no-eval: 0*/\nimport React, { Component } from 'react';\nimport xlsx from 'xlsx/dist/xlsx.full.min';\nimport stringifyObject from 'stringify-object';\nimport Clipboard from 'clipboard';\nimport './App.css';\n\nconst defaultFunction = `(data) => { // data是excel文件读取后的JSON数据\n  /* processing logic */ \n  return data\n}`\n\nclass App extends Component {\n\n  constructor (props) {\n    super(props)\n    // 初始化剪贴板\n    this.clipboard = new Clipboard('.copyBtn')\n    this.clipboard.on('success', e => {\n      e.clearSelection()\n      alert('复制成功！')\n    })\n    this.state = {\n      file: null, // 上传的文件\n      sheet: 0, // sheet序号\n      function: defaultFunction, // 自定义处理函数\n      json: '', // 处理结果\n      line: 0, // 有效行数\n    }\n  }\n\n  componentWillUnmount() {\n    this.clipboard.destroy()\n  }\n\n  changeState = (e, key) => {\n    e.preventDefault()\n    this.setState({\n      [key]: key === 'file' ? e.target.files[0] : e.target.value\n    })\n  }\n\n  transfer = () => {\n    if (!this.state.file) return alert('请选择文件！')\n    let reader = new FileReader()\n    reader.onload = () => {\n      let workbook = xlsx.read(reader.result, { type: 'binary' })\n      let data = xlsx.utils.sheet_to_json(workbook.Sheets[workbook.SheetNames[this.state.sheet]])\n      let fn = window.eval(this.state.function)\n      let result = fn(data)\n      this.setState({\n        line: result.length,\n        json: stringifyObject(result, {\n          indent: '  ',\n          singleQuotes: false,\n        }),\n      })\n    }\n    reader.readAsBinaryString(this.state.file)\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">Excel2JSON</h1>\n        </header>\n        <main>\n          <div className='container'>\n            <div className='Input'>\n              <div className='item'>\n                <label className='uploadfile mr-2'>\n                  <span>{this.state.file ? this.state.file.name : '请选择文件'}</span>\n                  <input type='file' \n                    accept='.xls, .xlsx' \n                    onChange={e => this.changeState(e, 'file')}/>\n                </label>\n                <label>\n                  Sheet序号：\n                  <input className='sheet' \n                    type='number' \n                    min='0' \n                    value={this.state.sheet} \n                    onChange={e => this.changeState(e, 'sheet')}/>\n                </label>\n              </div>\n              <div className='item'>\n                <textarea className='function-textarea' \n                  rows='10' \n                  cols='84' \n                  placeholder='自定义处理（JS）' \n                  value={this.state.function} \n                  onChange={e => this.changeState(e, 'function')}/>\n              </div>\n              <div className='item'>\n                <button className='btn mr-2' \n                  type='button' \n                  onClick={this.transfer}>\n                  转换\n                </button>\n                <button className='btn copyBtn' \n                  type='button' \n                  data-clipboard-target=\"#result\">\n                  复制结果\n                </button>\n              </div>\n              <span>有效行数：{ this.state.line }</span>\n            </div>\n            <div className='Result'>\n              <textarea id='result' value={this.state.json}/>\n            </div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}